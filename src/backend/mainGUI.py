import time
import os
import pandas as pd
from pythonping import ping
from datetime import datetime
import sys
import re

from pathlib import Path
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path("./assets")

from tkinter import *
import importlib.util

from dbConnect import MyDb
from dbInteract import DBInteract
from modules import GlobalValues
from modules import FileManager as FM
from modules import PingTest as PT
from modules import SpeedyTest

# Global Values
runningDir = os.path.dirname(__file__)


# TODO: Impliment data analysis 
class DataAnalyzer:
    def __init__(self):
        pass

    def analyze(self):
        place_holder_message = "Analyzing the data. Press any key to exit the application."
        print(place_holder_message)
        sys.stdout.flush()

def mainloop():
    # tie in to a listener for terminating the loop
    main()

def main():
    # Connect to the Database
    # create DB object
    db_obj = MyDb()
    # connect and get cursor
    db_connection = db_obj.connect()
    db_cursor = db_connection.cursor()
    db_interactor = DBInteract(db_cursor)
    try:
        pingG = PT.PingGoogle()
        pingC = PT.PingCloudFlare() 
        pingO = PT.PingOpenDNS()
        analyzer = DataAnalyzer()
        st = SpeedyTest.SpeedyTester()

        while True:
            time.sleep(8)
            pingG.run(db_interactor)
            pingC.run(db_interactor)
            pingO.run(db_interactor)
            st.run(db_interactor)
            # commit the changes to the database
            db_connection.commit()

        input("Press Enter To Continue")
        exit()
    # Close the connection
    except Exception as e:
        print("An unexpected error occurred: ".format(e))
        sys.stdout.flush()
    finally:
        db_cursor.close()


# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer



def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def invoke_scanner():
    mainloop()


window = Tk()

window.geometry("720x480")
window.configure(bg = "#FFFFFF")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 480,
    width = 720,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    32.0,
    23.0,
    692.0,
    389.0,
    fill="#D5EBF4",
    outline="")

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: invoke_scanner(),
    relief="flat"
)
button_1.place(
    x=235.0,
    y=401.0,
    width=250.0,
    height=65.0
)
window.resizable(False, False)
window.mainloop()